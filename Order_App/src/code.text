SUplierPage code :  import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { FiUpload, FiEdit2, FiTrash2, FiPlus, FiPackage, FiDollarSign, FiTag, FiInfo } from 'react-icons/fi'

const initialProduct = {
  name: '',
  description: '',
  price: '',
  category: '',
  image: null,
  stock: '',
  unit: 'kg'
}

const categories = [
  'Fruits & Vegetables',
  'Snacks & Beverages',
  'Meat & Seafood',
  'Canned & Packaged Goods',
  'Bakery Items',
  'Dairy Products',
  'Organic Foods',
  'Frozen Foods'
]

const units = ['kg', 'g', 'lb', 'oz', 'piece', 'pack', 'liter', 'ml']

const SupplierDashboard = () => {
  const [products, setProducts] = useState([])
  const [form, setForm] = useState(initialProduct)
  const [editIndex, setEditIndex] = useState(null)
  const [imgPreview, setImgPreview] = useState('')
  const [activeTab, setActiveTab] = useState('products')
  const [stats, setStats] = useState({
    totalProducts: 0,
    activeOrders: 0,
    monthlyRevenue: 'LKR 0',
    rating: 4.7
  })

   useEffect(() => {
    const fetchProducts = async () => {
      try {
        const token = localStorage.getItem('userToken');
        const response = await fetch('/api/products', {
          headers: {
            'Authorization': `Bearer ${token}`,
          },
        });
        
        if (!response.ok) {
          throw new Error('Failed to fetch products');
        }
        
        const data = await response.json();
        setProducts(data);
        setStats(prev => ({
          ...prev,
          totalProducts: data.length
        }));
      } catch (error) {
        console.error('Error fetching products:', error);
        // Add error handling UI here if needed
      }
    };

    fetchProducts();
  }, []);

  const handleChange = (e) => {
    const { name, value, files } = e.target
    if (name === 'image' && files[0]) {
      const reader = new FileReader()
      reader.onload = (ev) => setImgPreview(ev.target.result)
      reader.readAsDataURL(files[0])
      setForm({ ...form, image: files[0] })
    } else {
      setForm({ ...form, [name]: value })
    }
  }

   const handleSubmit = async (e) => {
    e.preventDefault()
    if (!form.name || !form.price || !form.category || !form.image) return
    
    try {
      const token = localStorage.getItem('userToken')
      const formData = new FormData()
      
      // Append all form fields
      formData.append('name', form.name)
      formData.append('description', form.description)
      formData.append('category', form.category)
      formData.append('price', form.price)
      formData.append('stock', form.stock)
      formData.append('unit', form.unit)
      formData.append('image', form.image) // Append the image file

      const url = editIndex !== null 
        ? `/api/products/${products[editIndex]._id}`
        : '/api/products'

      const method = editIndex !== null ? 'PUT' : 'POST'

      const response = await fetch(url, {
        method,
        headers: {
          'Authorization': `Bearer ${token}`,
        },
        body: formData,
      })

      if (!response.ok) throw new Error('Failed to save product')

      const savedProduct = await response.json()

      // Update local state
      if (editIndex !== null) {
        setProducts(products.map((p, i) => i === editIndex ? savedProduct : p))
      } else {
        setProducts([...products, savedProduct])
      }

      // Reset form
      setForm(initialProduct)
      setImgPreview('')
      setEditIndex(null)
    } catch (error) {
      console.error('Error saving product:', error)
      alert('Failed to save product. Please try again.')
    }
  }

  const handleEdit = (idx) => {
    setForm({
      name: products[idx].name,
      description: products[idx].description,
      price: products[idx].price,
      category: products[idx].category,
      stock: products[idx].stock,
      unit: products[idx].unit,
      image: null // Reset image to null when editing
    })
    setImgPreview(products[idx].image)
    setEditIndex(idx)
    window.scrollTo({ top: 0, behavior: 'smooth' })
  }

  const handleDelete = async (idx) => {
    try {
      const token = localStorage.getItem('userToken')
      const productId = products[idx]._id
      
      const response = await fetch(`/api/products/${productId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
      })

      if (!response.ok) throw new Error('Failed to delete product')

      // Update local state
      setProducts(products.filter((_, i) => i !== idx))
      
      if (editIndex === idx) {
        setForm(initialProduct)
        setImgPreview('')
        setEditIndex(null)
      }
    } catch (error) {
      console.error('Error deleting product:', error)
      alert('Failed to delete product. Please try again.')
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      {/* Header */}
      <header className="bg-gradient-to-r from-green-700 to-green-900 text-white shadow-lg">
        <div className="max-w-7xl mx-auto px-4 py-6 flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <FiPackage className="text-3xl" />
            <h1 className="text-2xl font-bold">Supplier Portal</h1>
          </div>
          <div className="flex items-center space-x-6">
            <button 
              onClick={() => setActiveTab('products')} 
              className={`px-4 py-2 rounded-lg font-medium ${activeTab === 'products' ? 'bg-white text-green-800' : 'hover:bg-green-600'}`}
            >
              My Products
            </button>
            <button 
              onClick={() => setActiveTab('analytics')} 
              className={`px-4 py-2 rounded-lg font-medium ${activeTab === 'analytics' ? 'bg-white text-green-800' : 'hover:bg-green-600'}`}
            >
              Analytics
            </button>
            <div className="flex items-center space-x-2">
              <div className="w-10 h-10 rounded-full bg-white text-green-800 flex items-center justify-center font-bold">
                SP
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Stats Overview */}
      <section className="max-w-7xl mx-auto px-4 py-8">
        <motion.div 
          className="grid grid-cols-1 md:grid-cols-4 gap-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ staggerChildren: 0.1 }}
        >
          {[
            { icon: <FiPackage className="text-2xl" />, title: 'Total Products', value: stats.totalProducts },
            { icon: <FiTag className="text-2xl" />, title: 'Active Orders', value: stats.activeOrders },
            { icon: <FiDollarSign className="text-2xl" />, title: 'Monthly Revenue', value: stats.monthlyRevenue },
            { icon: <FiInfo className="text-2xl" />, title: 'Rating', value: `${stats.rating}/5.0` },
          ].map((stat, index) => (
            <motion.div 
              key={index}
              className="bg-white rounded-xl shadow-md p-6 flex items-center space-x-4"
              whileHover={{ y: -5, boxShadow: '0 10px 25px rgba(0,0,0,0.1)' }}
            >
              <div className="p-3 rounded-lg bg-green-100 text-green-700">
                {stat.icon}
              </div>
              <div>
                <h3 className="text-gray-500 text-sm font-medium">{stat.title}</h3>
                <p className="text-2xl font-bold text-gray-800">{stat.value}</p>
              </div>
            </motion.div>
          ))}
        </motion.div>
      </section>

      <main className="max-w-7xl mx-auto px-4 pb-16">
        {activeTab === 'products' ? (
          <>
            {/* Product Form */}
            <motion.section
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              className="bg-white rounded-2xl shadow-xl overflow-hidden mb-12"
            >
              <div className="bg-green-700 px-8 py-4">
                <h2 className="text-xl font-bold text-white">
                  {editIndex !== null ? 'Edit Product' : 'Add New Product'}
                </h2>
              </div>
              
              <form onSubmit={handleSubmit} className="p-8 grid grid-cols-1 lg:grid-cols-2 gap-8">
                <div className="space-y-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Product Name *</label>
                    <input
                      type="text"
                      name="name"
                      value={form.name}
                      onChange={handleChange}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                      placeholder="e.g. Organic Apples"
                      required
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Description</label>
                    <textarea
                      name="description"
                      value={form.description}
                      onChange={handleChange}
                      className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                      placeholder="Product details, features, etc."
                      rows={3}
                    />
                  </div>
                  
                  <div className="grid grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Category *</label>
                      <select
                        name="category"
                        value={form.category}
                        onChange={handleChange}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        required
                      >
                        <option value="">Select category</option>
                        {categories.map((cat) => (
                          <option key={cat} value={cat}>{cat}</option>
                        ))}
                      </select>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Unit</label>
                      <select
                        name="unit"
                        value={form.unit}
                        onChange={handleChange}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                      >
                        {units.map((unit) => (
                          <option key={unit} value={unit}>{unit}</option>
                        ))}
                      </select>
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-2 gap-6">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Price (LKR) *</label>
                      <input
                        type="number"
                        name="price"
                        value={form.price}
                        onChange={handleChange}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        placeholder="0.00"
                        min="0"
                        step="0.01"
                        required
                      />
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">Stock Quantity</label>
                      <input
                        type="number"
                        name="stock"
                        value={form.stock}
                        onChange={handleChange}
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                        placeholder="Available quantity"
                        min="0"
                      />
                    </div>
                  </div>
                </div>
                
                <div className="flex flex-col">
                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      Product Image {!editIndex && '*'}
                    </label>
                    <div className="mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-300 border-dashed rounded-xl">
                      <div className="space-y-1 text-center">
                        {imgPreview ? (
                          <img src={imgPreview} alt="Preview" className="mx-auto h-48 w-auto object-contain rounded-lg" />
                        ) : (
                          <>
                            <div className="flex text-gray-400 justify-center">
                              <FiUpload className="text-4xl" />
                            </div>
                            <div className="flex text-sm text-gray-600">
                              <label className="relative cursor-pointer bg-white rounded-md font-medium text-green-600 hover:text-green-500 focus-within:outline-none">
                                <span>Upload a file</span>
                                <input 
                                  type="file" 
                                  name="image"
                                  accept="image/*"
                                  onChange={handleChange}
                                  className="sr-only"
                                  required={!editIndex}
                                />
                              </label>
                              <p className="pl-1">or drag and drop</p>
                            </div>
                            <p className="text-xs text-gray-500">
                              PNG, JPG, GIF up to 5MB
                            </p>
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  <motion.button
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    type="submit"
                    className="mt-auto w-full bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white py-3 px-6 rounded-lg font-bold text-lg transition-all flex items-center justify-center space-x-2"
                  >
                    <FiPlus />
                    <span>{editIndex !== null ? 'Update Product' : 'Add Product'}</span>
                  </motion.button>
                  
                  {editIndex !== null && (
                    <button
                      type="button"
                      onClick={() => {
                        setForm(initialProduct)
                        setImgPreview('')
                        setEditIndex(null)
                      }}
                      className="mt-3 w-full bg-gray-200 hover:bg-gray-300 text-gray-800 py-3 px-6 rounded-lg font-medium text-lg transition-colors"
                    >
                      Cancel Edit
                    </button>
                  )}
                </div>
              </form>
            </motion.section>

            {/* Product List */}
            <section>
              <div className="flex justify-between items-center mb-8">
                <h2 className="text-2xl font-bold text-gray-800">Your Products ({products.length})</h2>
                <div className="relative w-64">
                  <input
                    type="text"
                    placeholder="Search products..."
                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                  />
                  <div className="absolute right-3 top-2.5 text-gray-400">
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                  </div>
                </div>
              </div>
              
              {products.length === 0 ? (
                <div className="bg-white rounded-2xl shadow-md p-12 text-center">
                  <div className="mx-auto h-24 w-24 text-gray-300 mb-4">
                    <FiPackage className="w-full h-full" />
                  </div>
                  <h3 className="text-lg font-medium text-gray-900">No products yet</h3>
                  <p className="mt-1 text-sm text-gray-500">Get started by adding your first product.</p>
                  <button
                    onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
                    className="mt-6 inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                  >
                    <FiPlus className="-ml-1 mr-2 h-5 w-5" />
                    Add Product
                  </button>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {products.map((prod, idx) => (
                    <motion.div
                      key={idx}
                      className="bg-white rounded-xl shadow-md overflow-hidden flex flex-col"
                      whileHover={{ y: -5, boxShadow: '0 10px 25px rgba(0,0,0,0.1)' }}
                      layout
                    >
                      <div className="relative h-48 bg-gray-100">
                        <img 
                          src={prod.image} 
                          alt={prod.name} 
                          className="w-full h-full object-cover"
                        />
                        <div className="absolute top-3 right-3 flex space-x-2">
                          <button 
                            onClick={() => handleEdit(idx)}
                            className="p-2 bg-white rounded-full shadow-md text-green-600 hover:bg-green-50"
                          >
                            <FiEdit2 />
                          </button>
                          <button 
                            onClick={() => handleDelete(idx)}
                            className="p-2 bg-white rounded-full shadow-md text-red-600 hover:bg-red-50"
                          >
                            <FiTrash2 />
                          </button>
                        </div>
                      </div>
                      
                      <div className="p-6 flex-1 flex flex-col">
                        <div className="flex-1">
                          <h3 className="text-lg font-bold text-gray-900 mb-1">{prod.name}</h3>
                          <div className="flex items-center justify-between mb-2">
                            <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                              {prod.category}
                            </span>
                            <span className="text-lg font-bold text-green-700">
                              LKR {parseFloat(prod.price).toFixed(2)}
                            </span>
                          </div>
                          <p className="text-gray-600 text-sm mb-4 line-clamp-2">
                            {prod.description || 'No description provided'}
                          </p>
                        </div>
                        
                        <div className="flex justify-between items-center text-sm text-gray-500 border-t border-gray-100 pt-3">
                          <span>Stock: {prod.stock || 'N/A'} {prod.unit}</span>
                          <span>Added: {new Date(prod.createdAt || Date.now()).toLocaleDateString()}</span>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              )}
            </section>
          </>
        ) : (
          <div className="bg-white rounded-2xl shadow-xl p-8 text-center">
            <div className="mx-auto h-24 w-24 text-green-500 mb-6">
              <svg className="w-full h-full" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
              </svg>
            </div>
            <h2 className="text-2xl font-bold text-gray-800 mb-2">Supplier Analytics</h2>
            <p className="text-gray-600 mb-6">Detailed analytics and performance metrics coming soon!</p>
            <button 
              onClick={() => setActiveTab('products')}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
            >
              Back to Products
            </button>
          </div>
        )}
      </main>

      {/* Footer */}
      <footer className="bg-gray-800 text-white py-8">
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="mb-4 md:mb-0">
              <h3 className="text-xl font-bold flex items-center">
                <FiPackage className="mr-2" /> Supplier Portal
              </h3>
              <p className="text-gray-400 mt-1">© 2023 Order.uk. All rights reserved.</p>
            </div>
            <div className="flex space-x-6">
              <a href="#" className="text-gray-300 hover:text-white">Terms</a>
              <a href="#" className="text-gray-300 hover:text-white">Privacy</a>
              <a href="#" className="text-gray-300 hover:text-white">Support</a>
              <a href="#" className="text-gray-300 hover:text-white">Contact</a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  )
}

export default SupplierDashboard   this page is douing add product to mongo db product table  then this page show the product for user to buy Chart page code : import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Link } from 'react-router-dom';
import NavBarCart from '../components/NavBarCart';
import { getProducts } from '../api';

const ProductCard = ({ product, onAddToCart }) => {
  return (
    <motion.div 
      className="bg-white rounded-xl shadow-lg border border-black/10 p-8 flex flex-row gap-8 min-w-[400px] max-w-2xl mx-auto"
      whileHover={{ y: -5 }}
    >
      <div className="flex-shrink-0 w-52 h-52 flex items-center justify-center">
        <img 
          src={product.image} 
          alt={product.name} 
          className="w-full h-full object-cover rounded-xl"
        />
      </div>
      <div className="flex flex-col flex-1 justify-between">
        <div>
          <h3 className="text-black text-2xl font-semibold">{product.name}</h3>
          <p className="text-black text-base mt-2">{product.description}</p>
        </div>
        <div className="flex justify-between items-center mt-6">
          <span className="text-slate-950 text-xl font-bold">
            LKR {product.discounted ? product.discountPrice.toFixed(2) : product.price.toFixed(2)}
            {product.discounted && (
              <span className="ml-2 text-sm text-gray-500 line-through">
                LKR {product.price.toFixed(2)}
              </span>
            )}
          </span>
          <button 
            onClick={() => onAddToCart(product)}
            className="bg-green-700 text-white p-3 rounded-lg flex items-center justify-center"
          >
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-7 h-7">
              <path strokeLinecap="round" strokeLinejoin="round" d="M2.25 3h1.386c.51 0 .955.343 1.087.835l.383 1.437m2.35 9.708c-.155.516.232 1.02.772 1.02h12.508a.75.75 0 0 0 .743-.648l1.2-8.4a.75.75 0 0 0-.743-.852H6.28m0 0L5.1 4.272A1.125 1.125 0 0 0 4.013 3.75H2.25m3.75 6.75h13.5m-10.5 4.5a1.5 1.5 0 1 0 0 3 1.5 1.5 0 0 0 0-3zm7.5 1.5a1.5 1.5 0 1 0 3 0 1.5 1.5 0 0 0-3 0z" />
            </svg>
          </button>
        </div>
      </div>
    </motion.div>
  );
};

const FilterSection = ({ title, options, selectedFilters, onFilterChange }) => {
  return (
    <div className="mb-8">
      <h4 className="text-gray-800 text-lg font-semibold mb-4">{title}</h4>
      <div className="space-y-3">
        {options.map((option) => (
          <div key={option.value} className="flex items-center gap-3">
            <input 
              type="checkbox" 
              className="w-5 h-5 rounded border-gray-800/50"
              checked={selectedFilters.includes(option.value)}
              onChange={() => onFilterChange(option.value)}
            />
            <span className="text-slate-800">{option.label}</span>
          </div>
        ))}
      </div>
    </div>
  );
};

const ProductPage = () => {
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [priceFilter, setPriceFilter] = useState([]);
  const [categoryFilter, setCategoryFilter] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch products from backend
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const productsData = await getProducts();
        setProducts(productsData.data);
        setFilteredProducts(productsData.data);
        setLoading(false);
      } catch (err) {
        setError(err.message);
        setLoading(false);
      }
    };

    fetchProducts();
  }, []);

  // Apply filters when they change
  useEffect(() => {
    let result = [...products];
    
    if (priceFilter.length > 0) {
      result = result.filter(product => {
        if (priceFilter.includes('discounted') && product.discounted) return true;
        if (priceFilter.includes('regular') && !product.discounted) return true;
        return false;
      });
    }
    
    if (categoryFilter.length > 0) {
      result = result.filter(product => 
        categoryFilter.includes(product.category.toLowerCase())
      );
    }
    
    setFilteredProducts(result);
  }, [priceFilter, categoryFilter, products]);

  const handleAddToCart = async (product) => {
    try {
      await addToCart(product._id, 1);
      // You can add a toast notification here for success
    } catch (err) {
      console.error('Error adding to cart:', err);
      // Handle error (show error message)
    }
  };

  const priceOptions = [
    { value: 'discounted', label: 'Discounted' },
    { value: 'regular', label: 'Regular Price' }
  ];

  const categoryOptions = [
    { value: 'fruits', label: 'Fruits & Vegetables' },
    { value: 'snacks', label: 'Snacks & Beverages' },
    { value: 'meat', label: 'Meat & Seafood' },
    { value: 'packaged', label: 'Canned & Packaged Goods' },
    { value: 'bakery', label: 'Bakery Items' },
    { value: 'other', label: 'Other' }
  ];

  if (loading) {
    return (
      <div className="min-h-screen w-full relative bg-white overflow-hidden">
        <NavBarCart />
        <div className="container mx-auto px-4 py-8 mt-60 text-center">
          Loading products...
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen w-full relative bg-white overflow-hidden">
        <NavBarCart />
        <div className="container mx-auto px-4 py-8 mt-60 text-center">
          Error: {error}
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen w-full relative bg-white overflow-hidden">
      <NavBarCart />

      {/* Main Content */}
      <div className="container mx-auto px-4 py-8 mt-60 flex flex-col lg:flex-row gap-8">
        {/* Filters Section */}
        <div className="w-full lg:w-72 bg-white p-6 rounded-xl shadow-md">
          <h3 className="text-black text-xl font-semibold mb-6">Filters</h3>
          
          <FilterSection 
            title="Price"
            options={priceOptions}
            selectedFilters={priceFilter}
            onFilterChange={(value) => 
              setPriceFilter(prev => 
                prev.includes(value) 
                  ? prev.filter(v => v !== value) 
                  : [...prev, value]
              )
            }
          />

          <div className="w-full h-px bg-neutral-500/30 my-6"></div>

          <FilterSection 
            title="Category"
            options={categoryOptions}
            selectedFilters={categoryFilter}
            onFilterChange={(value) => 
              setCategoryFilter(prev => 
                prev.includes(value) 
                  ? prev.filter(v => v !== value) 
                  : [...prev, value]
              )
            }
          />
        </div>

        {/* Products Grid */}
        <div className="flex-1 grid grid-cols-1 md:grid-cols-2 gap-8">
          {filteredProducts.length > 0 ? (
            filteredProducts.map((product) => (
              <ProductCard 
                key={product._id}
                product={product}
                onAddToCart={handleAddToCart}
              />
            ))
          ) : (
            <div className="col-span-2 text-center py-12">
              <p className="text-xl">No products match your filters</p>
              <button 
                onClick={() => {
                  setPriceFilter([]);
                  setCategoryFilter([]);
                }}
                className="mt-4 text-amber-500 underline"
              >
                Clear all filters
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProductPage;   and this page is the when user click added to cart then this page workes as biling page  biling page code : import { motion } from 'framer-motion';
import { useState, useEffect } from 'react';

const CartPage = () => {
  const [cartItems, setCartItems] = useState([
    {
      id: 'prod001',
      name: 'Organic Apples',
      image: 'https://images.unsplash.com/photo-1568702846914-96b305d2aaeb?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8YXBwbGV8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60',
      price: 1200.00,
      quantity: 2,
      category: 'fruits'
    },
    {
      id: 'prod002',
      name: 'Fresh Salmon Fillet',
      image: 'https://images.unsplash.com/photo-1519708227418-c8fd9a32b7a2?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8c2FsbW9ufGVufDB8fDB8fA%3D%3D&auto=format&fit=crop&w=500&q=60',
      price: 3200.00,
      quantity: 1,
      category: 'meat'
    },
    {
      id: 'prod003',
      name: 'Artisan Bread',
      image: 'https://images.unsplash.com/photo-1509440159596-0249088772ff?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Mnx8YnJlYWR8ZW58MHx8MHx8&auto=format&fit=crop&w=500&q=60',
      price: 850.00,
      quantity: 3,
      category: 'bakery'
    }
  ]);

  const [orderHistory, setOrderHistory] = useState([
    {
      id: 'ORD001',
      date: '2023-11-15',
      items: 5,
      total: 7450.00,
      status: 'Delivered'
    },
    {
      id: 'ORD002',
      date: '2023-11-10',
      items: 3,
      total: 4200.00,
      status: 'Delivered'
    },
    {
      id: 'ORD003',
      date: '2023-11-05',
      items: 7,
      total: 11200.00,
      status: 'Delivered'
    }
  ]);

  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');

  const deliveryFee = 250.00;
  const discount = 500.00;

  // Calculate cart totals
  const subtotal = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  const total = subtotal + deliveryFee - discount;

  const updateQuantity = (id, newQuantity) => {
    if (newQuantity < 1) return;
    
    setCartItems(cartItems.map(item => 
      item.id === id ? {...item, quantity: newQuantity} : item
    ));
  };

  const removeItem = (id) => {
    setCartItems(cartItems.filter(item => item.id !== id));
  };

  const addToCart = () => {
    // This would be your actual implementation to add to MongoDB
    console.log("Adding items to MongoDB database...");
    // Typically you would do something like:
    // fetch('/api/cart', {
    //   method: 'POST',
    //   headers: {'Content-Type': 'application/json'},
    //   body: JSON.stringify(cartItems)
    // }).then(response => response.json())
    // .then(data => console.log('Success:', data))
    // .catch(error => console.error('Error:', error));
  };

  const proceedToCheckout = () => {
    if (cartItems.length === 0) {
      setAlertMessage('Your cart is empty. Please add items before checkout.');
      setShowAlert(true);
      return;
    }

    // Generate a new order ID
    const newOrderId = `ORD${(orderHistory.length + 1).toString().padStart(3, '0')}`;
    
    // Get current date in YYYY-MM-DD format
    const today = new Date();
    const dateString = today.toISOString().split('T')[0];
    
    // Create new order
    const newOrder = {
      id: newOrderId,
      date: dateString,
      items: cartItems.reduce((sum, item) => sum + item.quantity, 0),
      total: total,
      status: 'Ongoing',
      itemsDetails: [...cartItems] // Store the cart items for reference
    };

    // Add to order history
    setOrderHistory([newOrder, ...orderHistory]);
    
    // Show success message
    setAlertMessage(`Order #${newOrderId} has been placed successfully! Status: Ongoing`);
    setShowAlert(true);
    
    // Clear the cart (optional - you might want to keep items until payment is confirmed)
    // setCartItems([]);
    
    // Hide alert after 5 seconds
    setTimeout(() => {
      setShowAlert(false);
    }, 5000);
  };

  return (
    <div className="min-h-screen w-full relative bg-white overflow-hidden">
      {/* Alert Notification */}
      {showAlert && (
        <motion.div 
          className="fixed top-4 right-4 z-50 bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded-lg shadow-lg max-w-md"
          initial={{ opacity: 0, x: 100 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: 100 }}
          transition={{ duration: 0.3 }}
        >
          <div className="flex items-center">
            <svg className="h-6 w-6 text-green-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
            </svg>
            <p>{alertMessage}</p>
            <button 
              className="ml-4 text-green-700 hover:text-green-900"
              onClick={() => setShowAlert(false)}
            >
              <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </motion.div>
      )}
      
      {/* Main Content */}
      <div className="container mx-auto px-4 py-8 mt-28">
        <motion.h1 
          className="text-4xl font-bold text-gray-900 mb-2"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3 }}
        >
          Your Shopping Cart
        </motion.h1>
        <p className="text-gray-600 mb-8">Review and manage your items</p>
        
        <div className="flex flex-col lg:flex-row gap-8">
          {/* Cart Items */}
          <div className="lg:w-2/3">
            <div className="bg-white rounded-xl shadow-lg border border-gray-100 p-6">
              {cartItems.length === 0 ? (
                <div className="text-center py-12">
                  <svg className="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
                  </svg>
                  <h3 className="mt-2 text-lg font-medium text-gray-900">Your cart is empty</h3>
                  <p className="mt-1 text-gray-500">Start adding some delicious items to your cart!</p>
                  <div className="mt-6">
                    <button className="px-6 py-3 bg-amber-600 hover:bg-amber-700 text-white font-medium rounded-lg">
                      Continue Shopping
                    </button>
                  </div>
                </div>
              ) : (
                <>
                  <div className="grid grid-cols-12 gap-4 pb-4 border-b border-gray-200">
                    <div className="col-span-6 font-semibold text-gray-700">Product</div>
                    <div className="col-span-2 font-semibold text-gray-700 text-center">Price</div>
                    <div className="col-span-2 font-semibold text-gray-700 text-center">Quantity</div>
                    <div className="col-span-2 font-semibold text-gray-700 text-right">Total</div>
                  </div>
                  
                  {cartItems.map((item) => (
                    <motion.div 
                      key={item.id}
                      className="grid grid-cols-12 gap-4 py-6 border-b border-gray-100"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ duration: 0.3 }}
                    >
                      {/* ... (rest of the cart item rendering remains the same) ... */}
                    </motion.div>
                  ))}
                  
                  <div className="pt-6 flex justify-between">
                    <button className="px-6 py-3 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50">
                      Continue Shopping
                    </button>
                    <button 
                      className="px-6 py-3 bg-gray-100 rounded-lg text-gray-700 hover:bg-gray-200"
                      onClick={() => setCartItems([])}
                    >
                      Clear Cart
                    </button>
                  </div>
                </>
              )}
            </div>
            
            {/* Order History */}
            <div className="bg-white rounded-xl shadow-lg border border-gray-100 p-6 mt-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">Order History</h2>
              
              <div className="overflow-x-auto">
                <table className="min-w-full">
                  <thead>
                    <tr className="border-b border-gray-200">
                      <th className="py-3 px-4 text-left text-gray-700 font-semibold">Order ID</th>
                      <th className="py-3 px-4 text-left text-gray-700 font-semibold">Date</th>
                      <th className="py-3 px-4 text-center text-gray-700 font-semibold">Items</th>
                      <th className="py-3 px-4 text-right text-gray-700 font-semibold">Total</th>
                      <th className="py-3 px-4 text-center text-gray-700 font-semibold">Status</th>
                      <th className="py-3 px-4 text-center text-gray-700 font-semibold">Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    {orderHistory.map((order) => (
                      <tr key={order.id} className="border-b border-gray-100 hover:bg-gray-50">
                        <td className="py-4 px-4 text-gray-700 font-medium">{order.id}</td>
                        <td className="py-4 px-4 text-gray-600">{order.date}</td>
                        <td className="py-4 px-4 text-center text-gray-600">{order.items}</td>
                        <td className="py-4 px-4 text-right text-gray-900 font-medium">LKR {order.total.toFixed(2)}</td>
                        <td className="py-4 px-4 text-center">
                          <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                            order.status === 'Delivered' ? 'bg-green-100 text-green-800' : 
                            order.status === 'Processing' ? 'bg-yellow-100 text-yellow-800' : 
                            order.status === 'Ongoing' ? 'bg-blue-100 text-blue-800' :
                            'bg-gray-100 text-gray-800'
                          }`}>
                            {order.status}
                          </span>
                        </td>
                        <td className="py-4 px-4 text-center">
                          <button className="text-amber-600 hover:text-amber-700 font-medium">
                            View Details
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
              
              <div className="mt-6 text-center">
                <button className="px-6 py-3 bg-gray-100 rounded-lg text-gray-700 hover:bg-gray-200 font-medium">
                  View Full Order History
                </button>
              </div>
            </div>
          </div>
          
          {/* Order Summary */}
          <div className="lg:w-1/3">
            <div className="bg-white rounded-xl shadow-lg border border-gray-100 p-6 sticky top-28">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">Order Summary</h2>
              
              <div className="space-y-4 mb-6">
                <div className="flex justify-between">
                  <span className="text-gray-600">Subtotal</span>
                  <span className="text-gray-900 font-medium">LKR {subtotal.toFixed(2)}</span>
                </div>
                
                <div className="flex justify-between">
                  <span className="text-gray-600">Delivery Fee</span>
                  <span className="text-gray-900 font-medium">LKR {deliveryFee.toFixed(2)}</span>
                </div>
                
                <div className="flex justify-between">
                  <span className="text-gray-600">Discount</span>
                  <span className="text-green-600 font-medium">- LKR {discount.toFixed(2)}</span>
                </div>
                
                <div className="border-t border-gray-200 pt-4 flex justify-between">
                  <span className="text-gray-900 font-bold">Total</span>
                  <span className="text-gray-900 font-bold text-xl">LKR {total.toFixed(2)}</span>
                </div>
              </div>
              
              <button 
                className="w-full bg-amber-600 hover:bg-amber-700 text-white font-bold py-4 rounded-lg transition duration-300"
                onClick={proceedToCheckout}
              >
                Proceed to Checkout
              </button>
              
              {/* ... (rest of the order summary remains the same) ... */}
            </div>
          </div>
        </div>
      </div>
      
      {/* ... (footer remains the same) ... */}
    </div>
  );
};

export default CartPage;   There is 4 contraller page in back end call  cart order product and user theres is the code of them  cart contraller code : const asyncHandler = require('express-async-handler');
const Cart = require('../models/cartModel');

// @desc    Get user cart
// @route   GET /api/cart
const getCart = asyncHandler(async (req, res) => {
  const cart = await Cart.findOne({ user: req.user._id }).populate('items.product');
  
  if (!cart) {
    res.json({ items: [], totalPrice: 0 });
  } else {
    res.json(cart);
  }
});

// @desc    Add item to cart
// @route   POST /api/cart
const addToCart = asyncHandler(async (req, res) => {
  const { productId, quantity } = req.body;

  let cart = await Cart.findOne({ user: req.user._id });

  if (!cart) {
    cart = new Cart({
      user: req.user._id,
      items: [],
      totalPrice: 0
    });
  }

  const existingItem = cart.items.find(item => item.product.toString() === productId);

  if (existingItem) {
    existingItem.quantity += quantity;
  } else {
    cart.items.push({ product: productId, quantity });
  }

  cart.totalPrice = cart.items.reduce((total, item) => total + (item.product.price * item.quantity), 0);
  
  await cart.save();
  res.status(201).json(cart);
});

module.exports = {
  getCart,
  addToCart
};   order contraller : const asyncHandler = require('express-async-handler');
const Order = require('../models/orderModel');

// @desc    Create new order
// @route   POST /api/orders
const addOrderItems = asyncHandler(async (req, res) => {
  const { items, totalPrice } = req.body;

  if (items && items.length === 0) {
    res.status(400);
    throw new Error('No order items');
  }

  const order = new Order({
    user: req.user._id,
    items,
    totalPrice
  });

  const createdOrder = await order.save();
  res.status(201).json(createdOrder);
});

// @desc    Get user orders
// @route   GET /api/orders/myorders
const getMyOrders = asyncHandler(async (req, res) => {
  const orders = await Order.find({ user: req.user._id });
  res.json(orders);
});

module.exports = {
  addOrderItems,
  getMyOrders
};  product contralller : code : const asyncHandler = require('express-async-handler')
const Product = require('../models/productModel')
const multer = require('multer')
const path = require('path')

// Configure multer storage
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/')
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}${path.extname(file.originalname)}`)
  }
})

const upload = multer({ storage })

// @desc    Get all products
// @route   GET /api/products
const getProducts = asyncHandler(async (req, res) => {
  const products = await Product.find({ user: req.user._id }) // Only get products for logged in user
  res.json(products)
})

// @desc    Create a product
// @route   POST /api/products
const createProduct = asyncHandler(async (req, res) => {
  const { name, description, category, price, stock, unit } = req.body
  const imagePath = req.file ? `/uploads/${req.file.filename}` : null

  const product = new Product({
    user: req.user._id,
    name,
    description,
    category,
    price,
    stock,
    unit,
    image: imagePath
  })

  const createdProduct = await product.save()
  res.status(201).json(createdProduct)
})

// @desc    Update a product
// @route   PUT /api/products/:id
const updateProduct = asyncHandler(async (req, res) => {
  const { name, description, category, price, stock, unit } = req.body
  const imagePath = req.file ? `/uploads/${req.file.filename}` : undefined

  const product = await Product.findById(req.params.id)

  if (product) {
    // Verify product belongs to user
    if (product.user.toString() !== req.user._id.toString()) {
      res.status(401)
      throw new Error('Not authorized to update this product')
    }

    product.name = name || product.name
    product.description = description || product.description
    product.category = category || product.category
    product.price = price || product.price
    product.stock = stock || product.stock
    product.unit = unit || product.unit
    if (imagePath) product.image = imagePath

    const updatedProduct = await product.save()
    res.json(updatedProduct)
  } else {
    res.status(404)
    throw new Error('Product not found')
  }
})

// @desc    Delete a product
// @route   DELETE /api/products/:id
const deleteProduct = asyncHandler(async (req, res) => {
  const product = await Product.findById(req.params.id)

  if (product) {
    // Verify product belongs to user
    if (product.user.toString() !== req.user._id.toString()) {
      res.status(401)
      throw new Error('Not authorized to delete this product')
    }

    await product.remove()
    res.json({ message: 'Product removed' })
  } else {
    res.status(404)
    throw new Error('Product not found')
  }
})

module.exports = {
  getProducts,
  createProduct: [upload.single('image'), createProduct],
  updateProduct: [upload.single('image'), updateProduct],
  deleteProduct
}   then this is user contraller it is working correcty sont change it const asyncHandler = require('express-async-handler');
const User = require('../models/userModel');
const generateToken = require('../utils/generateToken');

// @desc    Register a regular user
// @route   POST /api/users/register
const registerUser = asyncHandler(async (req, res) => {
  const { firstName, lastName, email, password } = req.body;

  const userExists = await User.findOne({ email });
  if (userExists) {
    res.status(400);
    throw new Error('User already exists');
  }

  const user = await User.create({
    firstName,
    lastName,
    email,
    password,
    isSupplier: false
  });

  if (user) {
    res.status(201).json({
      _id: user._id,
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      isSupplier: user.isSupplier,
      token: generateToken(user._id)
    });
  } else {
    res.status(400);
    throw new Error('Invalid user data');
  }
});

// @desc    Register a supplier
// @route   POST /api/users/register-supplier
const registerSupplier = asyncHandler(async (req, res) => {
  const { companyName, contactPerson, email, password } = req.body;

  const userExists = await User.findOne({ email });
  if (userExists) {
    res.status(400);
    throw new Error('User already exists');
  }

  const user = await User.create({
    email,
    password,
    isSupplier: true,
    companyName,
    contactPerson
  });

  if (user) {
    res.status(201).json({
      _id: user.id,
      email: user.email,
      isSupplier: user.isSupplier,
      companyName: user.companyName,
      contactPerson: user.contactPerson,
      token: generateToken(user._id)
    });
  } else {
    res.status(400);
    throw new Error('Invalid supplier data');
  }
});


// @desc    Auth user & get token
// @route   POST /api/users/login
const loginUser = asyncHandler(async (req, res) => {
  const { email, password } = req.body;

  const user = await User.findOne({ email });

  if (user && (await user.matchPassword(password))) {
    res.json({
      _id: user._id,
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      isSupplier: user.isSupplier,
      companyName: user.companyName,
      contactPerson: user.contactPerson,
      token: generateToken(user._id)
    });
  } else {
    res.status(401);
    throw new Error('Invalid email or password');
  }
});

// @desc    Get user profile
// @route   GET /api/users/profile
const getUserProfile = asyncHandler(async (req, res) => {
  const user = await User.findById(req.user._id);

  if (user) {
    res.json({
      _id: user._id,
      firstName: user.firstName,
      lastName: user.lastName,
      email: user.email,
      isSupplier: user.isSupplier,
      companyName: user.companyName,
      contactPerson: user.contactPerson
    });
  } else {
    res.status(404);
    throw new Error('User not found');
  }
});

module.exports = {
  registerUser,
  registerSupplier,
  loginUser,
  getUserProfile
};  this is middle ware code const jwt = require('jsonwebtoken');
const asyncHandler = require('express-async-handler'); and this is modules cartModule : const mongoose = require('mongoose');

const cartItemSchema = mongoose.Schema({
  product: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Product',
    required: true
  },
  quantity: {
    type: Number,
    required: true,
    default: 1
  }
});

const cartSchema = mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  items: [cartItemSchema],
  totalPrice: {
    type: Number,
    default: 0
  }
});

module.exports = mongoose.model('Cart', cartSchema); 
const User = require('../models/userModel');

const protect = asyncHandler(async (req, res, next) => {
  let token;

  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
    try {
      token = req.headers.authorization.split(' ')[1];
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      req.user = await User.findById(decoded.id).select('-password');
      next();
    } catch (error) {
      res.status(401);
      throw new Error('Not authorized, token failed');
    }
  }

  if (!token) {
    res.status(401);
    throw new Error('Not authorized, no token');
  }
});

module.exports = { protect }; cart Module code const mongoose = require('mongoose');

const cartItemSchema = mongoose.Schema({
  product: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Product',
    required: true
  },
  quantity: {
    type: Number,
    required: true,
    default: 1
  }
});

const cartSchema = mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  items: [cartItemSchema],
  totalPrice: {
    type: Number,
    default: 0
  }
});

module.exports = mongoose.model('Cart', cartSchema);  order module  const mongoose = require('mongoose');

const orderItemSchema = mongoose.Schema({
  product: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Product',
    required: true
  },
  quantity: {
    type: Number,
    required: true
  },
  price: {
    type: Number,
    required: true
  }
});

const orderSchema = mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  items: [orderItemSchema],
  totalPrice: {
    type: Number,
    required: true
  },
  status: {
    type: String,
    default: 'Pending'
  }
}, {
  timestamps: true
});

module.exports = mongoose.model('Order', orderSchema);  product module const mongoose = require('mongoose');

const productSchema = mongoose.Schema(
  {
    user: {
      type: mongoose.Schema.Types.ObjectId,
      required: true,
      ref: 'User'
    },
    name: {
      type: String,
      required: true
    },
    image: {
      type: String,
      required: true
    },
    description: {
      type: String,
      required: true
    },
    category: {
      type: String,
      required: true
    },
    price: {
      type: Number,
      required: true,
      default: 0
    },
    stock: {
      type: Number,
      required: true,
      default: 0
    },
    unit: {
      type: String,
      required: true,
      default: 'kg'
    }
  },
  {
    timestamps: true
  }
);

const Product = mongoose.model('Product', productSchema);
module.exports = Product;  user module const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');

const userSchema = mongoose.Schema(
  {
    firstName: String,
    lastName: String,
    email: {
      type: String,
      required: true,
      unique: true
    },
    password: {
      type: String,
      required: true
    },
    isSupplier: {
      type: Boolean,
      required: true,
      default: false
    },
    companyName: String,
    contactPerson: String
  },
  {
    timestamps: true
  }
);

userSchema.methods.matchPassword = async function (enteredPassword) {
  return await bcrypt.compare(enteredPassword, this.password);
};

userSchema.pre('save', async function (next) {
  if (!this.isModified('password')) return next();
  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});


const User = mongoose.model('User', userSchema);
module.exports = User;  then this is route files   cartroues const express = require('express');
const router = express.Router();
const { getCart, addToCart } = require('../controllers/cartController');
const { protect } = require('../middlewares/authMiddleware');

router.route('/').get(protect, getCart).post(protect, addToCart);

module.exports = router;  oderRoutes code const express = require('express');
const router = express.Router();
const { addOrderItems, getMyOrders } = require('../controllers/orderController');
const { protect } = require('../middleware/authMiddleware');

router.route('/').post(protect, addOrderItems);
router.route('/myorders').get(protect, getMyOrders);

module.exports = router;  product routes const express = require('express');
const router = express.Router();
const {
  getProducts,
  createProduct,
  updateProduct,
  deleteProduct
} = require('../controllers/ProductController');
const { protect } = require('../middleware/authMiddleware');

router.route('/').get(getProducts).post(protect, createProduct);
router.route('/:id').put(protect, updateProduct).delete(protect, deleteProduct);

module.exports = router;   user routes const express = require('express');
const router = express.Router();
const {
  registerUser,
  registerSupplier,
  loginUser,
  getUserProfile
} = require('../controllers/userController');
const { protect } = require('../middleware/authMiddleware');

router.post('/register', registerUser);
router.post('/register-supplier', registerSupplier);
router.post('/login', loginUser);
router.get('/profile', protect, getUserProfile);




module.exports = router;  sever.js   const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
require('dotenv').config();
const userRoutes = require('./routes/userRoutes');
const app = express();

// Improved CORS configuration
const corsOptions = {
  origin: 'http://localhost:5173', // Your Vite frontend origin
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
};

// Middleware
app.use(cors());
app.use(express.json());


// Add this after your middleware but before routes
const path = require('path')
app.use('/uploads', express.static(path.join(__dirname, 'uploads')))
// Handle preflight requests
// app.options('*', cors(corsOptions));

// Database Connection
mongoose.connect(process.env.MONGO_URI)
  .then(() => console.log('Connected to MongoDB'))
  .catch(err => console.error('MongoDB connection error:', err));

// Routes
app.use('/api/users', require('./routes/userRoutes'));
app.use('/api/products', require('./routes/productRoutes'));
app.use('/api/orders', require('./routes/orderRoutes'));
app.use('/api/auth', userRoutes);

// Start Server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));  app.jsx import { Routes, Route, Navigate } from 'react-router-dom';
import Home from './pages/Home';
import Cart from './pages/Cart';
import SignUpPage from './pages/SignUpPage';
import SignInPage from './pages/SignInPage';
import SignUpSupplierPage from './pages/SignUpSupplierPage';
import ContactUsPage from './pages/ContactUsPage';
import FlashSalePage from './pages/FlashSalePage';
import SupplierDashboard from './Spplier_InterFace/SuplierPage';
import CartPage from './pages/CartPage';
import { useState, useEffect } from 'react';

function App() {
  const [userInfo, setUserInfo] = useState(null);
  
  useEffect(() => {
    setUserInfo(JSON.parse(localStorage.getItem('userInfo')));
  }, []);

  return (
    <div className="font-['Poppins']">
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/product" element={<Cart />} />
        <Route path="/contact-us" element={<ContactUsPage />} />
        <Route path="/signup" element={<SignUpPage />} />
        <Route path="/login" element={<SignInPage />} />
        <Route path="/supplier-signup" element={<SignUpSupplierPage />} />
        <Route path="/flash-sale" element={<FlashSalePage />} />
        <Route 
          path="/supplier" 
          element={userInfo?.isSupplier ? <SupplierDashboard /> : <Navigate to="/login" replace />} 
        />
        <Route path="/cart-page" element={<CartPage />} />
      </Routes>
    </div>
  );
}

export default App;   now i need a corect backend code for each file i m using mongo db data base in this code user section is 1005 working but product adding adn product showing is not working properly and also product buying is dont working correcly keep user back end and correct other all arres and give corect code with file name and full code of its file with full code to copy paste to vs code this my university web aplication asinment there for this is nt made fo uses ther for give working api and curd operatoion code no need to add more complex code in to it give corect working codes suplier login is working correct then i add product using suplier page it dont add to mongo db data base there for corect it and then product then user buy produtct it shuld be apper in cart database also i need complete back enad and code with correct api end point working web app  use working user section code as eference for correctiong other macanisum remember that dont change frunt end   give file name and correct full code for each file 